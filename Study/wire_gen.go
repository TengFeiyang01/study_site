// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"Training/Study/internal/repository"
	"Training/Study/internal/repository/dao"
	"Training/Study/internal/service"
	"Training/Study/internal/web"
	"Training/Study/ioc"
	"context"
	"github.com/gin-gonic/gin"
	"log"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	db := ioc.InitDB()
	questDao := dao.NewQuestionDao(db)
	questRepository := repository.NewQuestRepository(questDao)
	questService := service.NewQuestService(questRepository)
	questHandler := web.NewQuestHandler(questService)
	codingProblemDAO := dao.NewGormCodingProblemDAO(db)
	codingProblemRepository := repository.NewCachedCodingProblemRepository(codingProblemDAO)
	leetCodeCrawler := service.NewLeetCodeCrawler(codingProblemRepository)
	codingProblemService := service.NewCodingProblemService(codingProblemRepository, leetCodeCrawler)
	codingProblemHandler := web.NewCodingProblemHandler(codingProblemService)
	engine := InitGinServer(questHandler, codingProblemHandler, codingProblemService)
	return engine
}

// wire.go:

func InitGinServer(
	questionHandler *web.QuestHandler,
	codingHandler *web.CodingProblemHandler,
	codingService service.CodingProblemService,
) *gin.Engine {
	server := gin.Default()

	server.Use(func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	})

	go func() {
		ctx := context.Background()
		if problems, err := codingService.GetAllProblems(ctx); err != nil {
			log.Printf("Failed to warm up cache: %v", err)
		} else {
			log.Printf("Cache warmed up successfully with %d problems", len(problems))
		}

		go func() {
			if err := codingService.StartDailyCrawler(ctx); err != nil {
				log.Printf("Daily crawler stopped: %v", err)
			}
		}()
	}()

	questionHandler.RegisterRoutes(server)
	codingHandler.RegisterRoutes(server)

	return server
}
